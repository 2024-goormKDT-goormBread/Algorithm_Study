# 문제
# 상담을 완료하는데 걸리는 기간 T, 상담을 했을 때 받을 수 있는 금액 P
# N = 7
# 1일에 잡혀있는 상담은 총 3일이 걸리며, 상담했을 때 받을 수 있는 금액은 10이다.
# 5일에 잡혀있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15이다.
# 상담을 하는데 필요한 기간은 1일보다 클 수 있음
# 모든 상담을 할 수는 없다. 예를 들어서 1일에 상담을 하게 되면,
# 2일, 3일에 있는 상담은 할 수 없게 된다.
# 2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀있는 상담은 할 수 없다.
# 또한, N+1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없다.
# 퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며,
# 이때의 이익은 10+20+15=45이다.
# 상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N (1 ≤ N ≤ 1,500,000)이 주어진다.
#
# 둘째 줄부터 N개의 줄에 Ti와 Pi가 공백으로 구분되어서 주어지며,
# 1일부터 N일까지 순서대로 주어진다. (1 ≤ Ti ≤ 50, 1 ≤ Pi ≤ 1,000)
#
# 출력
# 첫째 줄에 백준이가 얻을 수 있는 최대 이익을 출력한다.
import sys

input = lambda: sys.stdin.readline().rstrip()

N = int(input())
t, p = [0 for _ in range(N + 1)], [0 for _ in range(N + 1)]
for i in range(1, N + 1):
    t[i], p[i] = map(int, input().split())
dp = [0 for i in range(N + 1)]

for i in range(1, N + 1):
    dp[i] = max(dp[i], dp[i - 1])  # 이전까지의 최댓값
    fin_data = i + t[i] - 1  # 당일 포함
    if fin_data <= N:  # 최종일 안에 일이 끝나는 경우
        # i일부터는 일을 해야하므로 i일에 얻을 수 있는
        # 최댓값이 아닌 i-1일까지 얻을 수 있는 최댓값을 구한다
        dp[fin_data] = max(dp[fin_data], dp[i - 1] + p[i])
print(dp[-1])
